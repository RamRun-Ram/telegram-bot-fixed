#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ª–æ–≥–∏–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
"""

import asyncio
import sys
import os
from datetime import datetime
import pytz

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from google_sheets_client import GoogleSheetsClient
from main import TelegramAutomation

async def debug_post_logic():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤"""
    
    print("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ª–æ–≥–∏–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Google Sheets
    sheets_client = GoogleSheetsClient()
    
    if not sheets_client.service:
        print("‚ùå Google Sheets API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    print("‚úÖ Google Sheets API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
    all_posts = sheets_client.get_all_posts()
    
    if not all_posts:
        print("‚ùå –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –≤ Google Sheets")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_posts)} –ø–æ—Å—Ç–æ–≤ –≤ Google Sheets")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç
    for i, post in enumerate(all_posts, 1):
        print(f"\nüìù –ü–æ—Å—Ç {i}:")
        print(f"   –°—Ç—Ä–æ–∫–∞: {post.get('row_index', 'N/A')}")
        print(f"   –î–∞—Ç–∞: {post.get('date', 'N/A')}")
        print(f"   –í—Ä–µ–º—è: {post.get('time', 'N/A')}")
        print(f"   –°—Ç–∞—Ç—É—Å: {post.get('status', 'N/A')}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_urls = post.get('image_urls', [])
        print(f"   image_urls: {image_urls}")
        print(f"   –¢–∏–ø image_urls: {type(image_urls)}")
        print(f"   –î–ª–∏–Ω–∞ image_urls: {len(image_urls) if image_urls else 0}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞
        has_images = post.get('image_urls') and len(post['image_urls']) > 0
        print(f"   has_images: {has_images}")
        
        if has_images:
            image_count = len(post['image_urls'])
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {image_count}")
            
            if image_count > 1:
                print(f"   üéØ –ú–µ—Ç–æ–¥: Markdown —Å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
            else:
                print(f"   üéØ –ú–µ—Ç–æ–¥: HTML —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º (–æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)")
        else:
            print(f"   üéØ –ú–µ—Ç–æ–¥: Markdown –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞
        text = post.get('text', '')
        text_preview = text[:100] if text else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'
        if len(text) > 100:
            text_preview += "..."
        print(f"   –¢–µ–∫—Å—Ç: {text_preview}")
        
        print(f"   {'='*50}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞:")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø–æ—Å—Ç–æ–≤
    test_cases = [
        {
            'name': '–ü–æ—Å—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
            'image_urls': [],
            'expected_method': 'Markdown –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
        },
        {
            'name': '–ü–æ—Å—Ç —Å –ø—É—Å—Ç—ã–º image_urls',
            'image_urls': None,
            'expected_method': 'Markdown –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
        },
        {
            'name': '–ü–æ—Å—Ç —Å –æ–¥–Ω–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º',
            'image_urls': ['https://example.com/image1.jpg'],
            'expected_method': 'HTML —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º'
        },
        {
            'name': '–ü–æ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏',
            'image_urls': ['https://example.com/image1.jpg', 'https://example.com/image2.jpg'],
            'expected_method': 'Markdown —Å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π'
        }
    ]
    
    for test_case in test_cases:
        print(f"\nüìã {test_case['name']}:")
        print(f"   image_urls: {test_case['image_urls']}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ publish_post
        has_images = test_case['image_urls'] and len(test_case['image_urls']) > 0
        print(f"   has_images: {has_images}")
        
        if has_images:
            image_count = len(test_case['image_urls'])
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {image_count}")
            
            if image_count > 1:
                method = "Markdown —Å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π"
            else:
                method = "HTML —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º"
        else:
            method = "Markdown –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
        
        print(f"   –í—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥: {method}")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {test_case['expected_method']}")
        print(f"   ‚úÖ –°–æ–≤–ø–∞–¥–∞–µ—Ç: {method == test_case['expected_method']}")

if __name__ == "__main__":
    asyncio.run(debug_post_logic())
