"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ Telegram-–∫–∞–Ω–∞–ª –∏–∑ Google Sheets
"""
import asyncio
import logging
import threading
import time
from datetime import datetime, time as dt_time, timedelta
import pytz
import os
import sys

from google_sheets_client import GoogleSheetsClient
from telegram_client import TelegramClient
from notification_system import NotificationSystem, NotificationType
from config import CHECK_TIMES, CHECK_INTERVAL_MINUTES, LOOKBACK_MINUTES, STATUS_PUBLISHED, STATUS_ERROR, STATUS_PENDING

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_automation.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

def debug_google_sheets_setup():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Google Sheets"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Google Sheets...")
    
    google_vars = [
        "GOOGLE_SHEET_ID", "GOOGLE_SHEET_NAME", "GOOGLE_PROJECT_ID",
        "GOOGLE_PRIVATE_KEY_ID", "GOOGLE_PRIVATE_KEY", "GOOGLE_CLIENT_EMAIL",
        "GOOGLE_CLIENT_ID", "GOOGLE_CLIENT_X509_CERT_URL"
    ]
    
    missing_vars = []
    for var in google_vars:
        value = os.getenv(var)
        if not value or value.startswith("YOUR_"):
            missing_vars.append(var)
            logger.error(f"‚ùå {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            logger.info(f"‚úÖ {var}: OK")
    
    if missing_vars:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        logger.error("üìã –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Railway Dashboard ‚Üí Settings ‚Üí Variables")
        return False
    else:
        logger.info("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Google Sheets —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True


class TelegramAutomation:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    
    def __init__(self):
        self.sheets_client = None
        self.telegram_client = None
        self.notification_system = None
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        self.daily_stats = {'published': 0, 'errors': 0, 'pending': 0}
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤...")
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Google Sheets
            debug_google_sheets_setup()
            
            self.sheets_client = GoogleSheetsClient()
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ Google Sheets
            if self.sheets_client.service:
                logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ Google Sheets...")
                self.sheets_client.setup_headers()
            self.telegram_client = TelegramClient()
            self.notification_system = NotificationSystem(self.telegram_client)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram
            if not await self.telegram_client.test_connection():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram Bot API")
            
            logger.info("–ö–ª–∏–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            current_time = datetime.now(self.moscow_tz)
            await self.notification_system.send_info_notification(
                "üöÄ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω–∞",
                {
                    "–≤—Ä–µ–º—è": current_time.strftime('%Y-%m-%d %H:%M:%S MSK'),
                    "–ø—Ä–æ–≤–µ—Ä–∫–∞": f"–∫–∞–∂–¥—ã–µ {CHECK_INTERVAL_MINUTES} –º–∏–Ω—É—Ç",
                    "–ø–æ–∏—Å–∫": f"–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {LOOKBACK_MINUTES} –º–∏–Ω—É—Ç",
                    "–∫–∞–Ω–∞–ª": "@sovpalitest",
                    "—Å—Ç–∞—Ç—É—Å": "–≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
                }
            )
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def _should_publish_post(self, post: dict, current_time: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        try:
            post_date_str = post.get('date', '')
            post_time_str = post.get('time', '')
            
            if not post_date_str or not post_time_str:
                logger.warning(f"–ü–æ—Å—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ {post['row_index']} –Ω–µ –∏–º–µ–µ—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏")
                return False
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞
            try:
                post_datetime = datetime.strptime(f"{post_date_str} {post_time_str}", "%Y-%m-%d %H:%M")
                post_datetime = self.moscow_tz.localize(post_datetime)
            except ValueError:
                # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
                try:
                    post_datetime = datetime.strptime(f"{post_date_str} {post_time_str}", "%d.%m.%Y %H:%M")
                    post_datetime = self.moscow_tz.localize(post_datetime)
                except ValueError:
                    try:
                        # –ü—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –∫–æ—Ä–æ—Ç–∫–∏–º –≥–æ–¥–æ–º (20.09.25)
                        post_datetime = datetime.strptime(f"{post_date_str} {post_time_str}", "%d.%m.%y %H:%M")
                        post_datetime = self.moscow_tz.localize(post_datetime)
                    except ValueError:
                        try:
                            post_datetime = datetime.strptime(f"{post_date_str} {post_time_str}", "%Y-%m-%d %H:%M:%S")
                            post_datetime = self.moscow_tz.localize(post_datetime)
                        except ValueError:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è –ø–æ—Å—Ç–∞: {post_date_str} {post_time_str}")
                            return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤—Ä–µ–º—è (–ø–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
            time_diff = (current_time - post_datetime).total_seconds() / 60  # –≤ –º–∏–Ω—É—Ç–∞—Ö
            
            # –ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ –Ω–∞—Å—Ç–æ—è—â–µ–º (time_diff >= 0)
            # time_diff > 0 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ—Å—Ç –≤ –ø—Ä–æ—à–ª–æ–º
            # time_diff = 0 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ—Å—Ç —Å–µ–π—á–∞—Å
            # time_diff < 0 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ—Å—Ç –≤ –±—É–¥—É—â–µ–º
            if time_diff >= 0:
                logger.info(f"–ü–æ—Å—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ {post['row_index']} –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤—Ä–µ–º—è –ø–æ—Å—Ç–∞: {post_datetime.strftime('%H:%M')}, —Ç–µ–∫—É—â–µ–µ: {current_time.strftime('%H:%M')}, —Ä–∞–∑–Ω–∏—Ü–∞: {time_diff:.1f} –º–∏–Ω)")
                return True
            else:
                logger.debug(f"–ü–æ—Å—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ {post['row_index']} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤—Ä–µ–º—è –ø–æ—Å—Ç–∞: {post_datetime.strftime('%H:%M')}, —Ç–µ–∫—É—â–µ–µ: {current_time.strftime('%H:%M')}, —Ä–∞–∑–Ω–∏—Ü–∞: {time_diff:.1f} –º–∏–Ω) - –ø–æ—Å—Ç –≤ –±—É–¥—É—â–µ–º")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞: {e}")
            return False
    
    async def process_pending_posts(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—ã, –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å—Ç–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            pending_posts = self.sheets_client.get_pending_posts()
            
            if not pending_posts:
                logger.info("–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
                current_time = datetime.now(self.moscow_tz)
                current_time_str = current_time.strftime('%H:%M:%S MSK')
                await self.notification_system.send_check_notification(0, 0, 0, current_time_str)
                return
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pending_posts)} –ø–æ—Å—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–û–∂–∏–¥–∞–µ—Ç'")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            current_time = datetime.now(self.moscow_tz)
            logger.info(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–æ—Å–∫–≤–∞): {current_time.strftime('%Y-%m-%d %H:%M:%S')}")
            posts_to_publish = []
            
            for post in pending_posts:
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ {post['row_index']}: {post['date']} {post['time']}")
                if self._should_publish_post(post, current_time):
                    posts_to_publish.append(post)
                    logger.info(f"‚úÖ –ü–æ—Å—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ {post['row_index']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                else:
                    logger.info(f"‚è∞ –ü–æ—Å—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ {post['row_index']} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤—Ä–µ–º—è: {post['time']}, –¥–∞—Ç–∞: {post['date']})")
            
            if not posts_to_publish:
                logger.info("–ù–µ—Ç –ø–æ—Å—Ç–æ–≤, –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
                current_time_str = current_time.strftime('%H:%M:%S MSK')
                await self.notification_system.send_check_notification(len(pending_posts), 0, 0, current_time_str)
                return
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(posts_to_publish)} –ø–æ—Å—Ç–æ–≤, –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            self.daily_stats['pending'] = len(posts_to_publish)
            
            # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            published_count = 0
            errors_count = 0
            
            for post in posts_to_publish:
                success = await self.publish_post(post)
                if success:
                    published_count += 1
                else:
                    errors_count += 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏
            current_time_str = current_time.strftime('%H:%M:%S MSK')
            await self.notification_system.send_check_notification(
                len(pending_posts), published_count, errors_count, current_time_str
            )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–æ–≤: {e}")
            await self.notification_system.send_error_notification(
                f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤: {str(e)}"
            )
    
    async def publish_post(self, post: dict) -> bool:
        """–ü—É–±–ª–∏–∫—É–µ—Ç –æ–¥–∏–Ω –ø–æ—Å—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞"""
        row_index = post['row_index']
        post_time = post['time']
        # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_urls = post.get('image_urls', [])
        has_images = bool(image_urls and len(image_urls) > 0 and any(url.strip() for url in image_urls if url.strip()))
        
        try:
            logger.info(f"–ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ {row_index} (–≤—Ä–µ–º—è: {post_time})")
            logger.info(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {'–¥–∞' if has_images else '–Ω–µ—Ç'}")
            logger.info(f"üìä image_urls: {image_urls}")
            logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ URL: {len(image_urls) if image_urls else 0}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if has_images:
                image_count = len(post['image_urls'])
                if image_count > 1:
                    # –ü–æ—Å—Ç —Å –ù–ï–°–ö–û–õ–¨–ö–ò–ú–ò –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ - Markdown –º–µ—Ç–æ–¥ —Å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π
                    logger.info(f"üñºÔ∏è –ü–æ—Å—Ç —Å {image_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º Markdown –º–µ—Ç–æ–¥ —Å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π")
                    success = await self.telegram_client.send_markdown_post_with_multiple_images(
                        text=post['text'],
                        image_urls=post['image_urls']
                    )
                else:
                    # –ü–æ—Å—Ç —Å –û–î–ù–ò–ú –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º - HTML –º–µ—Ç–æ–¥
                    logger.info("üñºÔ∏è –ü–æ—Å—Ç —Å 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML –º–µ—Ç–æ–¥")
                    success = await self.telegram_client.send_html_post_with_image(
                        text=post['text'],
                        image_urls=post['image_urls']
                    )
            else:
                # –ü–æ—Å—Ç –ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - Markdown –º–µ—Ç–æ–¥
                logger.info("üìù –ü–æ—Å—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º Markdown –º–µ—Ç–æ–¥")
                success = await self.telegram_client.send_markdown_post(
                    text=post['text']
                )
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"
                self.sheets_client.update_post_status(row_index, STATUS_PUBLISHED)
                self.daily_stats['published'] += 1
                logger.info(f"–ü–æ—Å—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ {row_index} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                await self.notification_system.send_info_notification(
                    "–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω",
                    {
                        "–î–∞—Ç–∞": post['date'],
                        "–í—Ä–µ–º—è": post['time'],
                        "–î–ª–∏–Ω–∞": f"{len(post['text'])} —Å–∏–º–≤–æ–ª–æ–≤",
                        "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è": "–¥–∞" if has_images else "–Ω–µ—Ç",
                        "–§–æ—Ä–º–∞—Ç": "HTML" if has_images else "Markdown"
                    }
                )
                return True
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–û—à–∏–±–∫–∞"
                error_msg = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"
                self.sheets_client.update_post_status(row_index, STATUS_ERROR, error_msg)
                self.daily_stats['errors'] += 1
                logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ {row_index}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                await self.notification_system.send_error_notification(error_msg, post)
                return False
                
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ {row_index}: {e}")
            
            try:
                self.sheets_client.update_post_status(row_index, STATUS_ERROR, error_msg)
                self.daily_stats['errors'] += 1
            except Exception as update_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {update_error}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await self.notification_system.send_error_notification(error_msg, post)
            return False
    
    def _run_process_posts_thread(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(self.process_pending_posts())
            loop.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _run_process_posts_thread: {e}")
    
    def _schedule_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        logger.info("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫...")
        logger.info("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 8:01 - 22:01 (–ú–°–ö)")
        logger.info("–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞: 23:00 - 7:00 (–ú–°–ö)")
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL_MINUTES} –º–∏–Ω—É—Ç")
        logger.info(f"–ò—â–µ–º –ø–æ—Å—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {LOOKBACK_MINUTES} –º–∏–Ω—É—Ç")
        
        while True:
            try:
                current_time = datetime.now(self.moscow_tz)
                current_hour = current_time.hour
                
                # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ–º –≤—Å–µ–≥–¥–∞ (—É–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
                logger.info(f"üïê –í—Ä–µ–º—è: {current_time.strftime('%H:%M')} - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç—ã")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                thread = threading.Thread(target=self._run_process_posts_thread)
                thread.daemon = True
                thread.start()
                thread.join()  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                
                # –ñ–¥–µ–º CHECK_INTERVAL_MINUTES –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                time.sleep(CHECK_INTERVAL_MINUTES * 60)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ _schedule_worker: {e}")
                time.sleep(CHECK_INTERVAL_MINUTES * 60)
    
    async def run_scheduled_checks(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –≤ —Ñ–æ–Ω–µ
        schedule_thread = threading.Thread(target=self._schedule_worker)
        schedule_thread.daemon = True
        schedule_thread.start()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∂–¥–µ—Ç
        try:
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    async def run_manual_check(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        logger.info("–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        await self.process_pending_posts()
    
    def run(self, manual=False):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
            if not asyncio.run(self.initialize()):
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—ã")
                return
            
            if manual:
                # –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                asyncio.run(self.run_manual_check())
            else:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
                asyncio.run(self.run_scheduled_checks())
                
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ Telegram-–∫–∞–Ω–∞–ª')
    parser.add_argument('--manual', action='store_true', 
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤–º–µ—Å—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞')
    parser.add_argument('--test', action='store_true',
                       help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤')
    
    args = parser.parse_args()
    
    automation = TelegramAutomation()
    
    if args.test:
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        logger.info("–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        asyncio.run(automation.initialize())
        logger.info("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
    else:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º
        automation.run(manual=args.manual)

if __name__ == "__main__":
    main()
