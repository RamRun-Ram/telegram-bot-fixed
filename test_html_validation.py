#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –≤–∞–ª–∏–¥–∞—Ü–∏–∏
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_html_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é HTML —Ç–µ–≥–æ–≤"""
    
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ _validate_html_tags
    def _validate_html_tags(text: str) -> str:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç HTML —Ç–µ–≥–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram
        """
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–≥–∏
        supported_tags = ['b', 'i', 'u', 'strong', 'em']
        
        for tag in supported_tags:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏
            open_tags = text.count(f'<{tag}>')
            close_tags = text.count(f'</{tag}>')
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏, –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏—Ö
            if open_tags > close_tags:
                missing_closes = open_tags - close_tags
                text += f'</{tag}>' * missing_closes
                print(f"‚ö†Ô∏è  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {missing_closes} –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–≥–æ–≤ <{tag}>")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏—à–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏, —É–¥–∞–ª—è–µ–º –∏—Ö
            elif close_tags > open_tags:
                # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏ —Å –∫–æ–Ω—Ü–∞
                extra_closes = close_tags - open_tags
                for _ in range(extra_closes):
                    text = text.rsplit(f'</{tag}>', 1)[0] + text.rsplit(f'</{tag}>', 1)[1]
                print(f"‚ö†Ô∏è  –£–¥–∞–ª–µ–Ω–æ {extra_closes} –ª–∏—à–Ω–∏—Ö –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–≥–æ–≤ </{tag}>")
        
        return text
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        {
            "name": "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–µ–≥–∏",
            "text": "<b>–ñ–∏—Ä–Ω—ã–π</b> <i>–ö—É—Ä—Å–∏–≤</i> <u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>",
            "expected": "–í—Å–µ —Ç–µ–≥–∏ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è"
        },
        {
            "name": "–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–π —Ç–µ–≥ <b>",
            "text": "<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è",
            "expected": "–î–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å—Å—è </b>"
        },
        {
            "name": "–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–π —Ç–µ–≥ <i>",
            "text": "<i>–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç",
            "expected": "–î–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å—Å—è </i>"
        },
        {
            "name": "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏",
            "text": "<b>–ñ–∏—Ä–Ω—ã–π <i>–ö—É—Ä—Å–∏–≤ <u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π",
            "expected": "–î–æ–ª–∂–Ω—ã –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤—Å–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏"
        },
        {
            "name": "–õ–∏—à–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏",
            "text": "<b>–ñ–∏—Ä–Ω—ã–π</b></b></b>",
            "expected": "–î–æ–ª–∂–Ω—ã —É–¥–∞–ª–∏—Ç—å—Å—è –ª–∏—à–Ω–∏–µ </b>"
        },
        {
            "name": "–°–º–µ—à–∞–Ω–Ω—ã–π —Å–ª—É—á–∞–π",
            "text": "<b>–ñ–∏—Ä–Ω—ã–π <i>–ö—É—Ä—Å–∏–≤</b> <u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u></u>",
            "expected": "–î–æ–ª–∂–Ω—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã"
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìù –¢–µ—Å—Ç {i}: {test_case['name']}")
        print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {test_case['text']}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º
        result = _validate_html_tags(test_case['text'])
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        print(f"–û–∂–∏–¥–∞–Ω–∏–µ: {test_case['expected']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–µ–≥–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã
        balanced = True
        for tag in ['b', 'i', 'u', 'strong', 'em']:
            open_count = result.count(f'<{tag}>')
            close_count = result.count(f'</{tag}>')
            if open_count != close_count:
                balanced = False
                print(f"‚ùå –¢–µ–≥ <{tag}> –Ω–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω: {open_count} –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö, {close_count} –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö")
        
        if balanced:
            print("‚úÖ –í—Å–µ —Ç–µ–≥–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            print("‚ùå –ï—Å—Ç—å –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏")

def test_full_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞"""
    
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞...")
    
    def _process_text_for_image_posts(text: str) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (HTML —Ñ–æ—Ä–º–∞—Ç)
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç HTML —Ç–µ–≥–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        # –ó–∞–º–µ–Ω—è–µ–º <br> –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        text = text.replace('<br>', '\n')
        text = text.replace('<br/>', '\n')
        text = text.replace('<br />', '\n')
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ HTML —Ç–µ–≥–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º <b>, <i>, <u>
        text = text.replace('<div>', '')
        text = text.replace('</div>', '')
        text = text.replace('<p>', '')
        text = text.replace('</p>', '')
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏
        text = text.replace('<ul>', '')
        text = text.replace('</ul>', '')
        text = text.replace('<ol>', '')
        text = text.replace('</ol>', '')
        text = text.replace('<li>', '‚Ä¢ ')
        text = text.replace('</li>', '\n')
        
        # –í–ê–ñ–ù–û: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º HTML —Ç–µ–≥–∏
        text = _validate_html_tags(text)
        
        return text
    
    def _validate_html_tags(text: str) -> str:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç HTML —Ç–µ–≥–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram
        """
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–≥–∏
        supported_tags = ['b', 'i', 'u', 'strong', 'em']
        
        for tag in supported_tags:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏
            open_tags = text.count(f'<{tag}>')
            close_tags = text.count(f'</{tag}>')
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏, –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏—Ö
            if open_tags > close_tags:
                missing_closes = open_tags - close_tags
                text += f'</{tag}>' * missing_closes
                print(f"‚ö†Ô∏è  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {missing_closes} –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–≥–æ–≤ <{tag}>")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏—à–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏, —É–¥–∞–ª—è–µ–º –∏—Ö
            elif close_tags > open_tags:
                # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏ —Å –∫–æ–Ω—Ü–∞
                extra_closes = close_tags - open_tags
                for _ in range(extra_closes):
                    text = text.rsplit(f'</{tag}>', 1)[0] + text.rsplit(f'</{tag}>', 1)[1]
                print(f"‚ö†Ô∏è  –£–¥–∞–ª–µ–Ω–æ {extra_closes} –ª–∏—à–Ω–∏—Ö –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–≥–æ–≤ </{tag}>")
        
        return text
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ HTML —Ç–µ–≥–∞–º–∏
    problematic_text = """
<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>
<i>–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è
<u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</u>
<div>Div —Ç–µ–≥</div>
<p>–ü–∞—Ä–∞–≥—Ä–∞—Ñ</p>
<ul>
<li>–≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ 1</li>
<li>–≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ 2</li>
</ul>
    """.strip()
    
    print("üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:")
    print(problematic_text)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    processed_text = _process_text_for_image_posts(problematic_text)
    
    print("\nüìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
    print(processed_text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
    print(f"–î–ª–∏–Ω–∞: {len(processed_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–µ–≥–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã
    balanced = True
    for tag in ['b', 'i', 'u', 'strong', 'em']:
        open_count = processed_text.count(f'<{tag}>')
        close_count = processed_text.count(f'</{tag}>')
        if open_count != close_count:
            balanced = False
            print(f"‚ùå –¢–µ–≥ <{tag}> –Ω–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω: {open_count} –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö, {close_count} –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö")
        else:
            print(f"‚úÖ –¢–µ–≥ <{tag}> —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω: {open_count} –ø–∞—Ä")
    
    if balanced:
        print("‚úÖ –í—Å–µ HTML —Ç–µ–≥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å HTML —Ç–µ–≥–∞–º–∏")

if __name__ == "__main__":
    test_html_validation()
    test_full_processing()
    
    print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("HTML –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–º–∏ —Ç–µ–≥–∞–º–∏")
    print("–≠—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–µ—à–∏—Ç—å –æ—à–∏–±–∫—É 'Can't find end tag corresponding to start tag'")
