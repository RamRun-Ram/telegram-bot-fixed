"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
"""
import logging
from typing import List
import asyncio
from telebot.async_telebot import AsyncTeleBot
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHANNEL_ID

logger = logging.getLogger(__name__)

class TelegramClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API"""
    
    def __init__(self):
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.channel_id = self._normalize_channel_id(TELEGRAM_CHANNEL_ID)
        self.bot = AsyncTeleBot(self.bot_token)
        logger.info(f"TelegramClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å channel_id: {self.channel_id}")
    
    def _normalize_channel_id(self, channel_id: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è Telegram API"""
        if not channel_id:
            return channel_id
        
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        if channel_id.startswith('@'):
            return channel_id[1:]
        
        # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π ID, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int
        if channel_id.startswith('-100'):
            try:
                return int(channel_id)
            except ValueError:
                pass
        
        return channel_id
    
    async def test_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram Bot API"""
        try:
            bot_info = await self.bot.get_me()
            logger.info(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
            try:
                chat_info = await self.bot.get_chat(self.channel_id)
                logger.info(f"–ö–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω: {chat_info.title} (ID: {chat_info.id})")
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {self.channel_id}: {e}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
            return False
    
    async def send_post(self, text: str, image_urls: List[str] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –≤ Telegram –∫–∞–Ω–∞–ª (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
        """
        try:
            if image_urls and len(image_urls) > 0:
                return await self.send_image_post(text, image_urls)
            else:
                return await self.send_text_message(text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")
            return False
    
    async def send_html_post_with_image(self, text: str, image_urls: List[str]) -> bool:
        """
        –ú–ï–¢–û–î 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTML –ø–æ—Å—Ç –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–¥–ª—è –æ–±–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤)
        –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü –ø–æ—Å—Ç–∞ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º (~4000 —Å–∏–º–≤–æ–ª–æ–≤)
        """
        try:
            if not image_urls or len(image_urls) == 0:
                logger.error("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è HTML –ø–æ—Å—Ç–∞")
                return False
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            processed_text = self._process_text_for_image_posts(text)
            image_url = image_urls[0]
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML –ø–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {image_url}")
            logger.info(f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(processed_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            bot = AsyncTeleBot(self.bot_token)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü –ø–æ—Å—Ç–∞ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
            # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ ~4000 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞
            message_text = f'{processed_text}\n\n<a href="{image_url}">üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</a>'
            
            try:
                await bot.send_message(
                    chat_id=self.channel_id,
                    text=message_text,
                    parse_mode='HTML',
                    disable_web_page_preview=False
                )
                
                logger.info("HTML –ø–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º)")
                return True
                
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º: {e}")
                
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                try:
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø–æ–¥–ø–∏—Å–∏ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ñ–æ—Ç–æ
                    caption = processed_text[:1000] if len(processed_text) > 1000 else processed_text
                    
                    await bot.send_photo(
                        chat_id=self.channel_id,
                        photo=image_url,
                        caption=caption,
                        parse_mode='HTML'
                    )
                    
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    if len(processed_text) > 1000:
                        remaining_text = processed_text[1000:]
                        await bot.send_message(
                            chat_id=self.channel_id,
                            text=remaining_text,
                            parse_mode='HTML'
                        )
                    
                    logger.info("HTML –ø–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é")
                    return True
                    
                except Exception as e2:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–æ—Ç–æ: {e2}")
                    raise e2
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML –ø–æ—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {e}")
            return False
    
    async def send_markdown_post(self, text: str) -> bool:
        """
        –ú–ï–¢–û–î 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Markdown –ø–æ—Å—Ç –ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∏ –≤–µ—á–µ—Ä–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤)
        """
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Markdown –ø–æ—Å—Ç–æ–≤
            formatted_text = self.format_text_for_telegram_markdown(text)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            bot = AsyncTeleBot(self.bot_token)
            
            await bot.send_message(
                chat_id=self.channel_id,
                text=formatted_text,
                parse_mode='Markdown'
            )
            
            logger.info("Markdown –ø–æ—Å—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Markdown –ø–æ—Å—Ç–∞: {e}")
            return False
    
    async def send_image_post(self, text: str, image_urls: List[str]) -> bool:
        """
        –ú–ï–¢–û–î 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç HTML —Å –Ω–µ–≤–∏–¥–∏–º—ã–º —Å–∏–º–≤–æ–ª–æ–º (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –ø–æ—Å—Ç–∞, –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤)
        """
        try:
            if not image_urls or len(image_urls) == 0:
                return False
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            processed_text = self._process_text_for_image_posts(text)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML —Å –Ω–µ–≤–∏–¥–∏–º—ã–º —Å–∏–º–≤–æ–ª–æ–º (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –ø–æ—Å—Ç–∞)
            image_url = image_urls[0]
            invisible_char = "&#8288;"  # Word Joiner
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–≤–∏–¥–∏–º–æ–π —Å—Å—ã–ª–∫–æ–π (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –ø–æ—Å—Ç–∞)
            message_text = f'<a href="{image_url}">{invisible_char}</a>{processed_text}'
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            bot = AsyncTeleBot(self.bot_token)
            
            await bot.send_message(
                chat_id=self.channel_id,
                text=message_text,
                parse_mode='HTML',
                disable_web_page_preview=False
            )
            
            logger.info("–ü–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ HTML —Å –Ω–µ–≤–∏–¥–∏–º—ã–º —Å–∏–º–≤–æ–ª–æ–º (–¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤)")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {e}")
            return False
    
    async def send_text_message(self, text: str) -> bool:
        """
        –ú–ï–¢–û–î 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç HTML –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML –¥–ª—è –ø–æ—Å—Ç–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            formatted_text = self.format_text_for_telegram_html(text)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            bot = AsyncTeleBot(self.bot_token)
            
            await bot.send_message(
                chat_id=self.channel_id,
                text=formatted_text,
                parse_mode='HTML'
            )
            
            logger.info("–ü–æ—Å—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ HTML –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")
            return False
    
    def _process_text_for_image_posts(self, text: str) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (HTML —Ñ–æ—Ä–º–∞—Ç)
        –û—Å—Ç–∞–≤–ª—è–µ—Ç HTML —Ç–µ–≥–∏ –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        # –ó–∞–º–µ–Ω—è–µ–º <br> –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        text = text.replace('<br>', '\n')
        text = text.replace('<br/>', '\n')
        text = text.replace('<br />', '\n')
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ HTML —Ç–µ–≥–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º <b>, <i>, <u>
        text = text.replace('<div>', '')
        text = text.replace('</div>', '')
        text = text.replace('<p>', '')
        text = text.replace('</p>', '')
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏
        text = text.replace('<ul>', '')
        text = text.replace('</ul>', '')
        text = text.replace('<ol>', '')
        text = text.replace('</ol>', '')
        text = text.replace('<li>', '‚Ä¢ ')
        text = text.replace('</li>', '\n')
        
        # –ù–ï –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º <b>, <i>, <u> - –æ—Å—Ç–∞–≤–ª—è–µ–º HTML –¥–ª—è –ø–æ—Å—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        # Telegram –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–∏ —Ç–µ–≥–∏ –≤ HTML —Ä–µ–∂–∏–º–µ
        
        return text
    
    def format_text_for_telegram_markdown(self, text: str) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è Markdown –ø–æ—Å—Ç–æ–≤ (–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
        """
        # –ó–∞–º–µ–Ω—è–µ–º HTML —Ç–µ–≥–∏ –Ω–∞ Markdown
        text = text.replace('<b>', '**')
        text = text.replace('</b>', '**')
        text = text.replace('<i>', '*')
        text = text.replace('</i>', '*')
        text = text.replace('<u>', '__')
        text = text.replace('</u>', '__')
        text = text.replace('<br>', '\n')
        text = text.replace('<br/>', '\n')
        text = text.replace('<br />', '\n')
        
        # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
        text = text.replace('<div>', '')
        text = text.replace('</div>', '')
        text = text.replace('<p>', '')
        text = text.replace('</p>', '')
        
        return text
    
    def format_text_for_telegram_html(self, text: str) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Markdown –≤ HTML –¥–ª—è Telegram
        """
        import re
        
        # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
        
        # –ö—É—Ä—Å–∏–≤ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
        
        # –ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        text = re.sub(r'__(.*?)__', r'<u>\1</u>', text)
        
        # –ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        text = re.sub(r'~~(.*?)~~', r'<s>\1</s>', text)
        
        # –ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        text = re.sub(r'`(.*?)`', r'<code>\1</code>', text)
        
        # –ë–ª–æ–∫ –∫–æ–¥–∞ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        text = re.sub(r'```(.*?)```', r'<pre>\1</pre>', text, flags=re.DOTALL)
        
        # –°—Å—ã–ª–∫–∏
        text = re.sub(r'\[([^\]]+)\]\(([^)]+)\)', r'<a href="\2">\1</a>', text)
        
        # –¶–∏—Ç–∞—Ç—ã - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
        text = re.sub(r'^> (.+?)$', r'<blockquote>\1</blockquote>', text, flags=re.MULTILINE)
        
        return text
