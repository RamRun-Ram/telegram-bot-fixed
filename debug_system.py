#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""
import os
import sys
import asyncio
from datetime import datetime, timedelta
import pytz

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append('.')

def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("=" * 50)
    
    required_vars = {
        'TELEGRAM_BOT_TOKEN': 'Telegram Bot Token',
        'TELEGRAM_CHANNEL_ID': 'Telegram Channel ID',
        'GOOGLE_SHEET_ID': 'Google Sheet ID',
        'GOOGLE_CREDENTIALS_JSON': 'Google Service Account JSON',
        'OPENROUTER_API_KEY': 'OpenRouter API Key'
    }
    
    missing_vars = []
    for var, description in required_vars.items():
        value = os.getenv(var)
        if not value or value.startswith("YOUR_"):
            print(f"‚ùå {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù ({description})")
            missing_vars.append(var)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            masked_value = f"{value[:8]}...{value[-8:]}" if len(value) > 16 else "***"
            print(f"‚úÖ {var}: OK ({masked_value})")
    
    if missing_vars:
        print(f"\n‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢: {', '.join(missing_vars)}")
        return False
    else:
        print("\n‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True

def check_google_sheets():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê GOOGLE SHEETS")
    print("=" * 50)
    
    try:
        from google_sheets_client import GoogleSheetsClient
        
        client = GoogleSheetsClient()
        if not client.service:
            print("‚ùå Google Sheets API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        print("‚úÖ Google Sheets API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
        posts = client.get_pending_posts()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–û–∂–∏–¥–∞–µ—Ç': {len(posts)}")
        
        if posts:
            print("\nüìù –ü–µ—Ä–≤—ã–µ 3 –ø–æ—Å—Ç–∞:")
            for i, post in enumerate(posts[:3]):
                print(f"  {i+1}. –°—Ç—Ä–æ–∫–∞ {post.get('row_index', 'N/A')}: {post.get('date', 'N/A')} {post.get('time', 'N/A')}")
                print(f"     –°—Ç–∞—Ç—É—Å: {post.get('status', 'N/A')}")
                print(f"     –¢–µ–∫—Å—Ç: {post.get('text', 'N/A')[:50]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets: {e}")
        return False

def check_telegram():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê TELEGRAM")
    print("=" * 50)
    
    try:
        from telegram_client import TelegramClient
        
        client = TelegramClient()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            result = loop.run_until_complete(client.test_connection())
            if result:
                print("‚úÖ Telegram Bot API –ø–æ–¥–∫–ª—é—á–µ–Ω")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram Bot API")
                return False
        finally:
            loop.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
        return False

def check_time_logic():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –í–†–ï–ú–ï–ù–ò")
    print("=" * 50)
    
    try:
        from main import TelegramAutomation
        
        automation = TelegramAutomation()
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        
        print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–æ—Å–∫–≤–∞): {current_time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞ 1 –º–∏–Ω—É—Ç—É –≤ –±—É–¥—É—â–µ–º
        test_post = {
            'date': current_time.strftime('%d.%m.%y'),
            'time': (current_time + timedelta(minutes=1)).strftime('%H:%M'),
            'row_index': 999
        }
        
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç: {test_post['date']} {test_post['time']}")
        
        should_publish = automation._should_publish_post(test_post, current_time)
        print(f"‚úÖ –î–æ–ª–∂–µ–Ω –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è: {should_publish}")
        
        return should_publish
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return False

def check_notification_system():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("=" * 50)
    
    try:
        from telegram_client import TelegramClient
        from notification_system import NotificationSystem
        
        client = TelegramClient()
        notification_system = NotificationSystem(client)
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return False

def run_full_diagnostic():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"""
    print("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò")
    print("=" * 60)
    
    results = {
        'environment': check_environment_variables(),
        'google_sheets': check_google_sheets(),
        'telegram': check_telegram(),
        'time_logic': check_time_logic(),
        'notifications': check_notification_system()
    }
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("=" * 50)
    
    for component, status in results.items():
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"{status_icon} {component.upper()}: {'OK' if status else 'ERROR'}")
    
    all_ok = all(results.values())
    
    if all_ok:
        print("\nüéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
    else:
        print("\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–Ω–æ–≤–∞.")
    
    return all_ok

if __name__ == "__main__":
    run_full_diagnostic()
