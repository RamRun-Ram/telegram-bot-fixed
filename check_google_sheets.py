#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Google Sheets
"""
import os
import sys
from datetime import datetime, timedelta
import pytz

def check_google_sheets():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Google Sheets"""
    print("üìã –ü–†–û–í–ï–†–ö–ê GOOGLE SHEETS")
    print("=" * 50)
    
    try:
        from google_sheets_client import GoogleSheetsClient
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        client = GoogleSheetsClient()
        
        if not client.service:
            print("‚ùå Google Sheets API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        print("‚úÖ Google Sheets API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
        posts = client.get_all_posts()
        print(f"üìä –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(posts)}")
        
        if posts:
            print(f"\nüìù –ü–û–°–¢–´ –í –¢–ê–ë–õ–ò–¶–ï:")
            for i, post in enumerate(posts[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"  {i+1}. –°—Ç—Ä–æ–∫–∞ {post.get('row_index', 'N/A')}")
                print(f"     –î–∞—Ç–∞: {post.get('date', 'N/A')}")
                print(f"     –í—Ä–µ–º—è: {post.get('time', 'N/A')}")
                print(f"     –°—Ç–∞—Ç—É—Å: {post.get('status', 'N/A')}")
                print(f"     –¢–µ–∫—Å—Ç: {post.get('text', 'N/A')[:50]}...")
                print()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–û–∂–∏–¥–∞–µ—Ç"
        pending_posts = client.get_pending_posts()
        print(f"‚è∞ –ü–æ—Å—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–û–∂–∏–¥–∞–µ—Ç': {len(pending_posts)}")
        
        if pending_posts:
            print(f"\n‚è∞ –ü–û–°–¢–´ –°–û –°–¢–ê–¢–£–°–û–ú '–û–ñ–ò–î–ê–ï–¢':")
            for i, post in enumerate(pending_posts):
                print(f"  {i+1}. –°—Ç—Ä–æ–∫–∞ {post.get('row_index', 'N/A')}")
                print(f"     –î–∞—Ç–∞: {post.get('date', 'N/A')}")
                print(f"     –í—Ä–µ–º—è: {post.get('time', 'N/A')}")
                print(f"     –¢–µ–∫—Å—Ç: {post.get('text', 'N/A')[:50]}...")
                print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets: {e}")
        import traceback
        traceback.print_exc()
        return False

def check_time_logic_for_posts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤"""
    print("\nüïê –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –í–†–ï–ú–ï–ù–ò –î–õ–Ø –ü–û–°–¢–û–í")
    print("=" * 50)
    
    try:
        from main import TelegramAutomation
        
        automation = TelegramAutomation()
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        
        print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time.strftime('%Y-%m-%d %H:%M:%S MSK')}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã
        posts = automation.sheets_client.get_pending_posts()
        
        if not posts:
            print("‚ùå –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–û–∂–∏–¥–∞–µ—Ç'")
            return False
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç
        posts_to_publish = []
        for post in posts:
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ {post.get('row_index', 'N/A')}:")
            print(f"   –î–∞—Ç–∞: {post.get('date', 'N/A')}")
            print(f"   –í—Ä–µ–º—è: {post.get('time', 'N/A')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏
            if automation._should_publish_post(post, current_time):
                posts_to_publish.append(post)
                print(f"   ‚úÖ –î–û–õ–ñ–ï–ù –ü–£–ë–õ–ò–ö–û–í–ê–¢–¨–°–Ø")
            else:
                print(f"   ‚ùå –ù–ï –ü–û–î–•–û–î–ò–¢ –ü–û –í–†–ï–ú–ï–ù–ò")
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"   –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")
        print(f"   –ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {len(posts_to_publish)}")
        
        return len(posts_to_publish) > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ü–†–û–í–ï–†–ö–ê GOOGLE SHEETS –ò –õ–û–ì–ò–ö–ò –í–†–ï–ú–ï–ù–ò")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Google Sheets
    sheets_ok = check_google_sheets()
    
    if sheets_ok:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏
        time_ok = check_time_logic_for_posts()
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   Google Sheets: {'OK' if sheets_ok else 'ERROR'}")
        print(f"   –õ–æ–≥–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: {'OK' if time_ok else 'ERROR'}")
        
        if time_ok:
            print(f"\nüéâ –°–ò–°–¢–ï–ú–ê –î–û–õ–ñ–ù–ê –†–ê–ë–û–¢–ê–¢–¨!")
        else:
            print(f"\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê –° –õ–û–ì–ò–ö–û–ô –í–†–ï–ú–ï–ù–ò!")
    else:
        print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–ê –° GOOGLE SHEETS!")

if __name__ == "__main__":
    main()
