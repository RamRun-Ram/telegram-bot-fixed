#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—É–±–ª–∏–∫—É–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã, –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
"""
import os
import sys
import asyncio
from datetime import datetime, timedelta
import pytz

async def force_publish_all_posts():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—É–±–ª–∏–∫—É–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã"""
    print("üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –í–°–ï–• –ü–û–°–¢–û–í")
    print("=" * 60)
    
    try:
        from main import TelegramAutomation
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        automation = TelegramAutomation()
        await automation.initialize()
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–û–∂–∏–¥–∞–µ—Ç"
        print("üìã –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ Google Sheets...")
        pending_posts = automation.sheets_client.get_pending_posts()
        
        if not pending_posts:
            print("‚ùå –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–û–∂–∏–¥–∞–µ—Ç'")
            return False
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(pending_posts)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
        print(f"\nüìù –í–°–ï –ü–û–°–¢–´ –°–û –°–¢–ê–¢–£–°–û–ú '–û–ñ–ò–î–ê–ï–¢':")
        for i, post in enumerate(pending_posts):
            print(f"   {i+1}. –°—Ç—Ä–æ–∫–∞ {post.get('row_index', 'N/A')}")
            print(f"      –î–∞—Ç–∞: {post.get('date', 'N/A')}")
            print(f"      –í—Ä–µ–º—è: {post.get('time', 'N/A')}")
            print(f"      –¢–µ–∫—Å—Ç: {post.get('text', 'N/A')[:50]}...")
            print()
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        print(f"üì± –ü–£–ë–õ–ò–ö–£–ï–ú –í–°–ï –ü–û–°–¢–´ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û...")
        published_count = 0
        error_count = 0
        
        for i, post in enumerate(pending_posts):
            try:
                print(f"\nüîç –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç {i+1}/{len(pending_posts)}:")
                print(f"   –°—Ç—Ä–æ–∫–∞: {post.get('row_index', 'N/A')}")
                print(f"   –î–∞—Ç–∞: {post.get('date', 'N/A')}")
                print(f"   –í—Ä–µ–º—è: {post.get('time', 'N/A')}")
                
                # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
                success = await automation.publish_post(post)
                
                if success:
                    published_count += 1
                    print(f"   ‚úÖ –£–°–ü–ï–®–ù–û –û–ü–£–ë–õ–ò–ö–û–í–ê–ù")
                else:
                    error_count += 1
                    print(f"   ‚ùå –û–®–ò–ë–ö–ê –ü–£–ë–õ–ò–ö–ê–¶–ò–ò")
                
            except Exception as e:
                error_count += 1
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
        print(f"   –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(pending_posts)}")
        print(f"   –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_count}")
        print(f"   –û—à–∏–±–æ–∫: {error_count}")
        
        if published_count > 0:
            print(f"\nüéâ –£–°–ü–ï–®–ù–û –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–û {published_count} –ü–û–°–¢–û–í!")
            print(f"üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª: -1002907282373")
            return True
        else:
            print(f"\n‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –û–ü–£–ë–õ–ò–ö–û–í–ê–¢–¨ –ù–ò –û–î–ù–û–ì–û –ü–û–°–¢–ê")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def check_system_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    try:
        from main import TelegramAutomation
        
        automation = TelegramAutomation()
        await automation.initialize()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Google Sheets
        if automation.sheets_client.service:
            print("‚úÖ Google Sheets: –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã
            posts = automation.sheets_client.get_pending_posts()
            print(f"üìä –ü–æ—Å—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–û–∂–∏–¥–∞–µ—Ç': {len(posts)}")
            
            if posts:
                print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–æ—Å—Ç–∞:")
                for i, post in enumerate(posts[:3]):
                    print(f"  {i+1}. –°—Ç—Ä–æ–∫–∞ {post.get('row_index', 'N/A')}")
                    print(f"     –î–∞—Ç–∞: {post.get('date', 'N/A')}")
                    print(f"     –í—Ä–µ–º—è: {post.get('time', 'N/A')}")
                    print(f"     –°—Ç–∞—Ç—É—Å: {post.get('status', 'N/A')}")
                    print()
        else:
            print("‚ùå Google Sheets: –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram
        if await automation.telegram_client.test_connection():
            print("‚úÖ Telegram: –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            print("‚ùå Telegram: –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –í–°–ï–• –ü–û–°–¢–û–í")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    await check_system_status()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—É–±–ª–∏–∫—É–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
    success = await force_publish_all_posts()
    
    if success:
        print(f"\nüéâ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢!")
        print(f"üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª -1002907282373")
    else:
        print(f"\n‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")
        print(f"üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: python full_diagnosis.py")

if __name__ == "__main__":
    asyncio.run(main())
