#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
"""
import asyncio
import sys
from datetime import datetime, timedelta
import pytz

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append('.')

async def force_publish_post():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—É–±–ª–∏–∫—É–µ—Ç –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ—Å—Ç"""
    try:
        from main import TelegramAutomation
        
        print("üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –ü–û–°–¢–ê")
        print("=" * 50)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        automation = TelegramAutomation()
        
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        if not await automation.initialize():
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã")
            return False
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã
        print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ Google Sheets...")
        pending_posts = automation.sheets_client.get_pending_posts()
        
        if not pending_posts:
            print("‚ùå –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return False
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(pending_posts)} –ø–æ—Å—Ç–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
        print("\nüìù –í–°–ï –ü–û–°–¢–´:")
        for i, post in enumerate(pending_posts):
            print(f"  {i+1}. –°—Ç—Ä–æ–∫–∞ {post.get('row_index', 'N/A')}: {post.get('date', 'N/A')} {post.get('time', 'N/A')}")
            print(f"     –°—Ç–∞—Ç—É—Å: {post.get('status', 'N/A')}")
            print(f"     –¢–µ–∫—Å—Ç: {post.get('text', 'N/A')[:100]}...")
            print()
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç
        first_post = pending_posts[0]
        print(f"üéØ –ü—É–±–ª–∏–∫—É–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç (—Å—Ç—Ä–æ–∫–∞ {first_post.get('row_index', 'N/A')})")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—É–±–ª–∏–∫—É–µ–º
        success = await automation.publish_post(first_post)
        
        if success:
            print("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")
        
        return success
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_time_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏"""
    print("\nüïê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –í–†–ï–ú–ï–ù–ò")
    print("=" * 50)
    
    try:
        from main import TelegramAutomation
        
        automation = TelegramAutomation()
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        
        print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        test_cases = [
            ("–°–µ–π—á–∞—Å", current_time),
            ("+1 –º–∏–Ω—É—Ç–∞", current_time + timedelta(minutes=1)),
            ("+2 –º–∏–Ω—É—Ç—ã", current_time + timedelta(minutes=2)),
            ("+5 –º–∏–Ω—É—Ç", current_time + timedelta(minutes=5)),
            ("+10 –º–∏–Ω—É—Ç", current_time + timedelta(minutes=10)),
            ("-1 –º–∏–Ω—É—Ç–∞", current_time - timedelta(minutes=1)),
            ("-5 –º–∏–Ω—É—Ç", current_time - timedelta(minutes=5)),
        ]
        
        for name, test_time in test_cases:
            test_post = {
                'date': test_time.strftime('%d.%m.%y'),
                'time': test_time.strftime('%H:%M'),
                'row_index': 999
            }
            
            should_publish = automation._should_publish_post(test_post, current_time)
            status = "‚úÖ –î–ê" if should_publish else "‚ùå –ù–ï–¢"
            print(f"  {name}: {status}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏
    await test_time_logic()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
    success = await force_publish_post()
    
    if success:
        print("\nüéâ –£–°–ü–ï–•! –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê! –ü–æ—Å—Ç –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")

if __name__ == "__main__":
    asyncio.run(main())
