#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
"""
import os
import sys
import asyncio
from datetime import datetime, timedelta
import pytz

async def force_publish_now():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"""
    print("üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –ü–û–°–¢–ê")
    print("=" * 50)
    
    try:
        from main import TelegramAutomation
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        automation = TelegramAutomation()
        await automation.initialize()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        
        test_post = {
            'date': current_time.strftime('%d.%m.%y'),
            'time': current_time.strftime('%H:%M'),
            'text': f"<b>üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢–û–í–´–ô –ü–û–°–¢</b><br><br>–≠—Ç–æ—Ç –ø–æ—Å—Ç –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã.<br><br><i>–í—Ä–µ–º—è:</i> {current_time.strftime('%H:%M:%S MSK')}<br><br>–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç, –∑–Ω–∞—á–∏—Ç —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
            'prompt_ru': "",
            'prompt_en': "",
            'image_urls': "",
            'status': '–û–∂–∏–¥–∞–µ—Ç'
        }
        
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω:")
        print(f"   –î–∞—Ç–∞: {test_post['date']}")
        print(f"   –í—Ä–µ–º—è: {test_post['time']}")
        print(f"   –¢–µ–∫—Å—Ç: {test_post['text'][:100]}...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ Google Sheets
        print(f"\nüìã –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ Google Sheets...")
        result = automation.sheets_client.add_post(test_post)
        
        if result:
            print(f"‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ Google Sheets")
            
            # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
            print(f"\nüì± –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –≤ Telegram...")
            success = await automation.publish_post(test_post)
            
            if success:
                print(f"üéâ –ü–û–°–¢ –£–°–ü–ï–®–ù–û –û–ü–£–ë–õ–ò–ö–û–í–ê–ù!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ Google Sheets")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def check_system_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    try:
        from main import TelegramAutomation
        
        automation = TelegramAutomation()
        await automation.initialize()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Google Sheets
        if automation.sheets_client.service:
            print("‚úÖ Google Sheets: –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã
            posts = automation.sheets_client.get_pending_posts()
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")
            
            if posts:
                print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–æ—Å—Ç–∞:")
                for i, post in enumerate(posts[:3]):
                    print(f"  {i+1}. –°—Ç—Ä–æ–∫–∞ {post.get('row_index', 'N/A')}")
                    print(f"     –î–∞—Ç–∞: {post.get('date', 'N/A')}")
                    print(f"     –í—Ä–µ–º—è: {post.get('time', 'N/A')}")
                    print(f"     –°—Ç–∞—Ç—É—Å: {post.get('status', 'N/A')}")
                    print()
        else:
            print("‚ùå Google Sheets: –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram
        if await automation.telegram_client.test_connection():
            print("‚úÖ Telegram: –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            print("‚ùå Telegram: –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    await check_system_status()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
    success = await force_publish_now()
    
    if success:
        print(f"\nüéâ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢!")
    else:
        print(f"\n‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")

if __name__ == "__main__":
    asyncio.run(main())
