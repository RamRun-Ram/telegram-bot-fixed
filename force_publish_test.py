#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
"""
import os
import sys
import asyncio
from datetime import datetime, timedelta
import pytz

async def force_publish_test():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—É–±–ª–∏–∫—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç"""
    print("üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –¢–ï–°–¢–û–í–û–ì–û –ü–û–°–¢–ê")
    print("=" * 60)
    
    try:
        from main import TelegramAutomation
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        automation = TelegramAutomation()
        await automation.initialize()
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        
        test_post = {
            'date': current_time.strftime('%d.%m.%y'),
            'time': current_time.strftime('%H:%M'),
            'text': f"<b>üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢–û–í–´–ô –ü–û–°–¢</b><br><br>–≠—Ç–æ—Ç –ø–æ—Å—Ç –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã.<br><br><i>–í—Ä–µ–º—è:</i> {current_time.strftime('%H:%M:%S MSK')}<br><br>–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç, –∑–Ω–∞—á–∏—Ç —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
            'prompt_ru': "",
            'prompt_en': "",
            'image_urls': "",
            'status': '–û–∂–∏–¥–∞–µ—Ç',
            'row_index': 999
        }
        
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω:")
        print(f"   –î–∞—Ç–∞: {test_post['date']}")
        print(f"   –í—Ä–µ–º—è: {test_post['time']}")
        print(f"   –¢–µ–∫—Å—Ç: {test_post['text'][:100]}...")
        
        # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –Ω–∞–ø—Ä—è–º—É—é
        print(f"\nüì± –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –≤ Telegram...")
        success = await automation.publish_post(test_post)
        
        if success:
            print(f"üéâ –ü–û–°–¢ –£–°–ü–ï–®–ù–û –û–ü–£–ë–õ–ò–ö–û–í–ê–ù!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def check_pending_posts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å—Ç—ã, –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –ü–û–°–¢–û–í, –ì–û–¢–û–í–´–• –ö –ü–£–ë–õ–ò–ö–ê–¶–ò–ò")
    print("=" * 60)
    
    try:
        from main import TelegramAutomation
        
        automation = TelegramAutomation()
        await automation.initialize()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–û–∂–∏–¥–∞–µ—Ç"
        pending_posts = automation.sheets_client.get_pending_posts()
        
        if not pending_posts:
            print("‚ùå –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–û–∂–∏–¥–∞–µ—Ç'")
            return False
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(pending_posts)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        
        posts_to_publish = []
        for i, post in enumerate(pending_posts):
            print(f"\nüîç –ü–æ—Å—Ç {i+1}:")
            print(f"   –°—Ç—Ä–æ–∫–∞: {post.get('row_index', 'N/A')}")
            print(f"   –î–∞—Ç–∞: {post.get('date', 'N/A')}")
            print(f"   –í—Ä–µ–º—è: {post.get('time', 'N/A')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏
            if automation._should_publish_post(post, current_time):
                posts_to_publish.append(post)
                print(f"   ‚úÖ –î–û–õ–ñ–ï–ù –ü–£–ë–õ–ò–ö–û–í–ê–¢–¨–°–Ø")
            else:
                print(f"   ‚ùå –ù–ï –ü–û–î–•–û–î–ò–¢ –ü–û –í–†–ï–ú–ï–ù–ò")
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"   –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(pending_posts)}")
        print(f"   –ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {len(posts_to_publish)}")
        
        # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç—ã, –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if posts_to_publish:
            print(f"\nüì± –ü–£–ë–õ–ò–ö–£–ï–ú –ü–û–°–¢–´...")
            published_count = 0
            for post in posts_to_publish:
                success = await automation.publish_post(post)
                if success:
                    published_count += 1
                    print(f"   ‚úÖ –ü–æ—Å—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ {post.get('row_index', 'N/A')} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ {post.get('row_index', 'N/A')}")
            
            print(f"\nüéâ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–û –ü–û–°–¢–û–í: {published_count}/{len(posts_to_publish)}")
            return published_count > 0
        else:
            print(f"\n‚è∞ –ù–ï–¢ –ü–û–°–¢–û–í –î–õ–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–ò")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç—ã, –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    success1 = await check_pending_posts()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—É–±–ª–∏–∫—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
    success2 = await force_publish_test()
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   –ü–æ—Å—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {'‚úÖ OK' if success1 else '‚ùå ERROR'}")
    print(f"   –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç: {'‚úÖ OK' if success2 else '‚ùå ERROR'}")
    
    if success1 or success2:
        print(f"\nüéâ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢!")
        print(f"üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram-–∫–∞–Ω–∞–ª")
    else:
        print(f"\n‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")
        print(f"üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: python full_diagnosis.py")

if __name__ == "__main__":
    asyncio.run(main())
